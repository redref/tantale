#!/usr/bin/env python
# coding=utf-8

from __future__ import print_function

import os
import sys
import time
import socket
from subprocess import check_output, CalledProcessError, STDOUT
from six import b as bytes
import stat

if len(sys.argv) < 3:
    print(
        "You must specify at least 2 args.\n"
        "  %s <service_name> <check_command>" % __file__,
        file=sys.stderr)
    sys.exit(1)

fifo_path = "/dev/shm/nagios_fifo"

if fifo_path and not os.path.exists(fifo_path):
    print("%s not exists." % fifo_path, file=sys.stderr)
    sys.exit(1)

if not stat.S_ISFIFO(os.stat(fifo_path).st_mode):
    print("%s not a fifo file." % fifo_path, file=sys.stderr)
    sys.exit(1)

try:
    fifo = os.open(fifo_path, os.O_WRONLY | os.O_NONBLOCK)
except:
    print(
        "%s fifo not suitable for write. Tantale Client may be down." %
        fifo_path, file=sys.stderr)
    sys.exit(1)

service = sys.argv[1]
command = ' '.join(sys.argv[2:])

try:
    output = check_output(
        command, stdin=None, stderr=STDOUT, shell=True).decode('utf-8')
    status = 0
except CalledProcessError as e:
    output = e.output.decode('utf-8')
    status = e.returncode

# Output must be one liner
try:
    output = output[:output.index("\n")]
except:
    pass

os.write(
    fifo,
    bytes(
        "[%d] PROCESS_SERVICE_CHECK_RESULT;%s;%s;%d;%s\n" %
        (int(time.time()), socket.getfqdn(), service, status, output)))
os.close(fifo)
