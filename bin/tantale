#!/usr/bin/env python
# coding=utf-8

from __future__ import print_function
import os
import sys
import configobj
import socket
import multiprocessing
import optparse
import signal
import logging
import logging.config
import fcntl

# Add src folder (dev file tree)
path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'src'))
if os.path.exists(os.path.join(path, 'tantale', '__init__.py')):
    sys.path.insert(0, path)


def main():
    try:
        parser = optparse.OptionParser()

        parser.add_option("-c", "--configfile",
                          dest="configfile",
                          default="/etc/tantale/tantale.conf",
                          help="config file")

        parser.add_option("-f", "--foreground",
                          dest="foreground",
                          default=False,
                          action="store_true",
                          help="run in foreground")

        parser.add_option("-l", "--log-stdout",
                          dest="log_stdout",
                          default=False,
                          action="store_true",
                          help="log to stdout")

        parser.add_option("-p", "--pidfile",
                          dest="pidfile",
                          default=None,
                          help="pid file")

        parser.add_option("-v", "--version",
                          dest="version",
                          default=False,
                          action="store_true",
                          help="display the version and exit")

        parser.add_option("--skip-pidfile",
                          dest="skip_pidfile",
                          default=False,
                          action="store_true",
                          help="Skip creating PID file")

        parser.add_option("-u", "--user",
                          dest="user",
                          default=None,
                          help="Change to specified unprivilegd user")

        parser.add_option("-g", "--group",
                          dest="group",
                          default=None,
                          help="Change to specified unprivilegd group")

        parser.add_option("--skip-change-user",
                          dest="skip_change_user",
                          default=False,
                          action="store_true",
                          help="Skip changing to an unprivilegd user")

        parser.add_option("--skip-fork",
                          dest="skip_fork",
                          default=False,
                          action="store_true",
                          help="Skip forking (damonizing) process")

        # Parse Command Line Args
        (options, args) = parser.parse_args()

        # Initial variables
        uid = -1
        gid = -1

        if options.version:
            from tantale import VERSION
            print("Tantale version %s" % VERSION)
            sys.exit(0)

        if options.foreground:
            options.skip_pidfile = True
            options.skip_fork = True
            options.log_stdout = True

        # Initialize Config
        options.configfile = os.path.abspath(options.configfile)
        if os.path.exists(options.configfile):
            from tantale import config_min
            config = configobj.ConfigObj(config_min)
            config.merge(configobj.ConfigObj(options.configfile))
        else:
            print("ERROR: Config file: %s does not exist." % (
                options.configfile), file=sys.stderr)
            parser.print_help(sys.stderr)
            sys.exit(1)

        # Initialize Logging
        from tantale.utils import DebugFormatter
        log = logging.getLogger('tantale')

        if options.log_stdout:
            log.setLevel(logging.DEBUG)
            streamHandler = logging.StreamHandler(sys.stdout)
            streamHandler.setFormatter(DebugFormatter())
            streamHandler.setLevel(logging.DEBUG)
            log.addHandler(streamHandler)
        else:
            try:
                logging.config.fileConfig(
                    options.configfile, disable_existing_loggers=False)
            except:
                import traceback
                print("Error occurs when initialize logging: ",
                      file=sys.stderr)
                print("Traceback: %s" % traceback.format_exc(),
                      file=sys.stderr)
                sys.exit(1)

    # Pass the exit up stream rather then handle it as an general exception
    except SystemExit as e:
        raise SystemExit

    except Exception as e:
        import traceback
        print("Unhandled exception: %s" % str(e), file=sys.stderr)
        print("Traceback: %s" % traceback.format_exc(), file=sys.stderr)
        sys.exit(1)

    try:
        from tantale.server import Server

        # PID MANAGEMENT
        if not options.skip_pidfile:
            # Initialize Pid file
            if not options.pidfile:
                options.pidfile = str(config['server']['pid_file'])

            # Read existing pid file
            if os.path.isfile(options.pidfile):
                with open(options.pidfile, 'r') as old_pidfile:
                    old_pid = old_pidfile.read()

            # Write pid file
            try:
                lockfile = open(options.pidfile, 'w')
            except IOError as e:
                log.critical("Failed to write PID file: %s" % e)
                sys.exit(1)

            try:
                # Try to get an exclusive lock on the file. This will fail
                # if another process has the file locked.
                fcntl.flock(lockfile, fcntl.LOCK_EX | fcntl.LOCK_NB)
            except IOError:
                log.error(
                    "ERROR: Unable to lock pidfile. Server already running?")
                sys.exit(1)

            # Get final GIDs
            if options.group is not None:
                gid = grp.getgrnam(options.group).gr_gid
            elif len(config['server']['group']):
                gid = grp.getgrnam(config['server']['group']).gr_gid

            # Get final UID
            if options.user is not None:
                uid = pwd.getpwnam(options.user).pw_uid
            elif len(config['server']['user']):
                uid = pwd.getpwnam(config['server']['user']).pw_uid

            # Fix up pid permissions
            os.chown(options.pidfile, uid, gid)
            log.debug("Wrote First PID file: %s" % (options.pidfile))

        # USER MANAGEMENT
        if not options.skip_change_user:
            # Switch user to specified user/group if required
            try:
                if gid != -1 and uid != -1:
                    # Manually set the groups since they aren't set by default
                    os.initgroups(pwd.getpwuid(uid).pw_name, gid)

                if gid != -1 and os.getgid() != gid:
                    # Set GID
                    os.setgid(gid)

                if uid != -1 and os.getuid() != uid:
                    # Set UID
                    os.setuid(uid)

            except Exception as e:
                print("ERROR: Failed to set UID/GID. %s" % (e),
                      file=sys.stderr)
                sys.exit(1)

            # Log
            log.debug('Changed UID: %d (%s) GID: %d (%s).' % (
                os.getuid(),
                config['server']['user'],
                os.getgid(),
                config['server']['group']))

        # DAEMONIZE MANAGEMENT
        if not options.skip_fork:
            # Detach
            if hasattr(signal, 'SIGHUP'):
                signal.signal(signal.SIGHUP, signal.SIG_IGN)
            log.info('Detaching Process.')
            l_read, l_write = socket.socketpair()

            # Fork 1
            try:
                pid = os.fork()
                if pid > 0:
                    l_write.close()
                    l_status = l_read.recv(1)

                    # Exit first parent
                    if l_status == 'r':
                        sys.exit(0)
                    else:
                        sys.exit(1)
            except OSError as e:
                log.critical("Failed to fork process." % e)
                sys.exit(1)
            l_read.close()

            # Decouple from parent environment
            os.setsid()
            os.umask(0o022)
            # Fork 2
            try:
                pid = os.fork()
                if pid > 0:
                    # Exit second paren
                    sys.exit(0)
            except OSError as e:
                log.critical("Failed to fork process." % e)
                sys.exit(1)

            # Close file descriptors so that we can detach
            sys.stdout.close()
            sys.stderr.close()
            sys.stdin.close()
            os.close(0)
            os.close(1)
            os.close(2)
            sys.stdout = open(os.devnull, 'w')
            sys.stderr = open(os.devnull, 'w')

        # PID MANAGEMENT
        if not options.skip_pidfile:
            try:
                lockfile.write("%s" % os.getpid())
                lockfile.flush()
            except IOError as e:
                log.error("Failed to write child PID file: %s" % e)
                sys.exit(1)
            log.debug("Wrote child PID file: %s" % (options.pidfile))

        # Initialize Server
        server = Server(configfile=options.configfile)

        # Run handle
        def __onInitDone():
            if not options.skip_fork:
                l_write.sendall("r")
                l_write.close()

        server.run(__onInitDone)

        # PID MANAGEMENT
        if not options.skip_pidfile and os.path.exists(options.pidfile):
            os.remove(options.pidfile)
            log.debug("Removed PID file: %s" % (options.pidfile))

        sys.exit(0)

    # Pass the exit up stream rather then handle it as an general exception
    except SystemExit as e:
        raise SystemExit

    except Exception as e:
        import traceback
        log.error("Unhandled exception: %s" % str(e))
        log.error("traceback: %s" % traceback.format_exc())
        sys.exit(1)

if __name__ == "__main__":
    main()
